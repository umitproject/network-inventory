; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; ============== IMPORTANT ================
; For this to work, change the SourceDir assignment in the
; [Setup] section to your network-inventory path.

#define MyAppName "Umit Inventory Server"
#define MyAppVersion "1.0"
#define MyAppPublisher "Umit Project"
#define MyAppURL "http://www.umitproject.org"
#define MyAppExeName "umit_ni_server.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{0D40F5D8-D9E1-4DC5-A177-B9BFF83EF41E}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename=umit_ni_server_v{#MyAppVersion}_setup
Compression=lzma
LicenseFile=LICENSE
SolidCompression=yes
SetupIconFile=share\icons\umit\inventory\umit_48.ico
AlwaysRestart=yes
PrivilegesRequired=admin
; ======= Change this to your network inventory dir =======
SourceDir=F:\Work\network-inventory

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
;Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Run]
Filename: {app}\umit_ni_server.exe; Parameters: install --admin-password={code:GetAdminPassword}; WorkingDir: {app}; Description: "Install as a Service (Recommended)"; Flags: SkipIfSilent ShellExec WaitUntilIdle RunAsCurrentUser; 

[Registry]
Root: HKLM; SubKey: SOFTWARE\Umit\Inventory; ValueType: string; ValueName: DataDirServer; ValueData: {app}; 
Root: HKLM; SubKey: SOFTWARE\Umit\Inventory; ValueType: string; ValueName: InstallPathServer; ValueData: {app};

[CustomMessages]
; Notifications Server page
DatabaseForm_Caption=Notifications Server Database Settings
DatabaseForm_Description=Settings related to the Mongo Database, used by the Server to store notifications and other data.

[Code]
Var
DatabasePage: TWizardPage;
AdminPasswordPage: TInputQueryWizardPage;
AdminPassword: String;
{ Database Page widgets }
InstallMongoCBox: TCheckBox;
DatabasePathLabel: TLabel;
DatabasePathEdit: TEdit;
DatabasePathButton: TButton;
DatabaseHostIntroLabel: TLabel;
DatabaseHostLabel: TLabel;
DatabaseHostEdit: TEdit;
DatabasePortLabel: TLabel;
DatabasePortEdit: TEdit;
DatabaseAuthIntroLabel: TLabel;
DatabaseUsernameLabel: TLabel;
DatabaseUsernameEdit: TEdit;
DatabasePasswordLabel: TLabel;
DatabasePasswordEdit: TPasswordEdit;

{ Called to get the admin password as entered by the user }
function GetAdminPassword(Param: String): String;
begin
  Result := AdminPasswordPage.Values[0]
end;

{ Called at the end of the setup to save the configurations }
procedure SaveConfiguration;
var
  ConfigFileStream: TFileStream;
  InstallPath: String;
  ConfigPath: String;
  Line: String;
begin
  InstallPath := ExpandConstant('{app}');
  ConfigPath := InstallPath + '\share\umit\config\inventory\umit_server.conf';
  ConfigFileStream := TFileStream.Create(ConfigPath, fmCreate or fmOpenWrite);
  Line := '[GeneralSection]' + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'interface_port = 30000' + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'force_interface_encrypt = False' + #13#10#13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := '[Database]' + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  if DatabaseHostEdit.Text <> '' then
  begin
    Line := 'host = ' + DatabaseHostEdit.Text + #13#10;
    ConfigFileStream.Write(Line, Length(Line));
    Line := 'port = ' + DatabasePortEdit.Text + #13#10;
    ConfigFileStream.Write(Line, Length(Line));
  end;
  
  if DatabaseUsernameEdit.Text <> '' then
  begin
    Line := 'username = ' + DatabaseUsernameEdit.Text + #13#10;
    ConfigFileStream.Write(Line, Length(Line));
    Line := 'password = ' + DatabasePasswordEdit.Text + #13#10;
    ConfigFileStream.Write(Line, Length(Line));
  end;
  
  ConfigFileStream.Free;
end;

{ Called when the mongo service should be installed and started }
procedure InstallAndStartMongo;
var
  InstallParam: String;
  StartParam: String;
  ResultCode: Integer;
begin
  // Ensure the database path exists
  if not ForceDirectories(DatabasePathEdit.Text) then
  begin
    MsgBox('Creating path ' + DatabasePathEdit.Text + ' failed', 
           mbError, MB_OK);
    exit;
  end;
  InstallParam := '--dbpath ' + DatabasePathEdit.Text + ' --directoryperdb ';
  InstallParam := InstallParam + '--logpath ' + DatabasePathEdit.Text + '\mongo_log'
  
  // Install mongo as a service
  InstallParam := InstallParam + ' --install'
  if not Exec(ExpandConstant('{app}\mongod.exe'), InstallParam,
              ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated,
              ResultCode) then
  begin
    MsgBox('Installing the Mongo Database Service failed.',
            mbError, MB_OK);
    exit;
  end;
  
  // Start mongo service
  if not Exec(ExpandConstant('{app}\mongod.exe'), '--service',
              ExpandConstant('{app}'), SW_HIDE, ewWaitUntilTerminated,
              ResultCode) then
  begin
    MsgBox('Starting the Mongo Database Service failed.',
           mbError, MB_OK);
  end;
  
end;

{ Called when the Wizard Page is changed }
procedure CurPageChanged(CurPageID: Integer);
var
  NextEnabled : Boolean;
begin
  if CurPageId = wpFinished then
  begin
    SaveConfiguration();
    InstallAndStartMongo();
  end;
end;

{ Called when the install mongo check box was clicked }
procedure InstallMongoCBoxOnClick(Sender: TObject);
begin
  // Disable checking a database path if not installing the mongo service
  DatabasePathEdit.Enabled := InstallMongoCBox.Checked;
  DatabasePathButton.Enabled := InstallMongoCBox.Checked;
end;

procedure DatabasePathButtonOnClick(Sender: TObject);
var
  PathDirectory: String;
  SelectDirCaption: String;
begin
  PathDirectory := '';
  SelectDirCaption := 'Select the folder where the database files will be stored';
  BrowseForFolder(SelectDirCaption, PathDirectory, True);
  DatabasePathEdit.Text := PathDirectory;
end;

{ Initialization procedures }
procedure InitializeWizard;
var
AdminPasswordDesc: String;
begin
               
  { === Initialize Admin Password Page === }
  AdminPasswordDesc := 'Please select the password for the administrator account. '
  AdminPasswordDesc := AdminPasswordDesc + 'The username associated with the administrator account is admin.'
  AdminPasswordPage := CreateInputQueryPage(wpSelectDir,
      'Administrator Password',
      '',
      AdminPasswordDesc);
  AdminPasswordPage.Add('Password:', True);

  { === Initialize Database Page === }
  DatabasePage := CreateCustomPage( AdminPasswordPage.ID, 
                                    ExpandConstant('{cm:DatabaseForm_Caption}'), 
                                    ExpandConstant('{cm:DatabaseForm_Description}') 
                                    );
  { Install database checkbox }
  InstallMongoCBox         := TCheckBox.Create(DatabasePage);
  InstallMongoCBox.Parent  := DatabasePage.Surface;
  InstallMongoCBox.Caption := 'Install Mongo Database (Required if not already installed)';
  InstallMongoCBox.Left    := ScaleX(0);
  InstallMongoCBox.Top     := ScaleY(0);
  InstallMongoCBox.Width   := ScaleX(380);
  InstallMongoCBox.Height  := ScaleY(13);
  InstallMongoCBox.CHecked := True;
  { Database Path Label }
  DatabasePathLabel         := TLabel.Create(DatabasePage);
  DatabasePathLabel.Parent  := DatabasePage.Surface;
  DatabasePathLabel.Caption := 'Database Storage Path:';
  DatabasePathLabel.Left    := ScaleX(0);
  DatabasePathLabel.Top     := ScaleY(24);
  DatabasePathLabel.Width   := ScaleX(200);
  DatabasePathLabel.Height  := ScaleY(20);
  { Database Path Edit }
  DatabasePathEdit          := TEdit.Create(DatabasePage);
  DatabasePathEdit.Parent   := DatabasePage.Surface;
  DatabasePathEdit.Left     := ScaleX(0);
  DatabasePathEdit.Top      := ScaleY(48);
  DatabasePathEdit.Width    := ScaleX(315);
  DatabasePathEdit.Height   := ScaleY(23);
  { Database Path Button }
  DatabasePathButton          := TButton.Create(DatabasePage);
  DatabasePathButton.Parent   := DatabasePage.Surface;
  DatabasePathButton.Caption  := 'Browse ...';
  DatabasePathButton.Left     := ScaleX(325);
  DatabasePathButton.Top      := ScaleY(46);
  DatabasePathButton.Width    := ScaleX(75);
  DatabasePathButton.Height   := ScaleY(24);
  { Database Host Intro Label }
  DatabaseHostIntroLabel         := TLabel.Create(DatabasePage);
  DatabaseHostIntroLabel.Parent  := DatabasePage.Surface;
  DatabaseHostIntroLabel.Caption := 'Database Host (blank if database is installed on localhost):';
  DatabaseHostIntroLabel.Left    := ScaleX(0);
  DatabaseHostIntroLabel.Top     := ScaleY(85);
  DatabaseHostIntroLabel.Width   := ScaleX(350);
  DatabaseHostIntroLabel.Height  := ScaleY(20);
  {Database Host Label }
  DatabaseHostLabel         := TLabel.Create(DatabasePage);
  DatabaseHostLabel.Parent  := DatabasePage.Surface;
  DatabaseHostLabel.Caption := 'Hostname or IP:';
  DatabaseHostLabel.Left    := ScaleX(0);
  DatabaseHostLabel.Top     := ScaleY(109);
  DatabaseHostLabel.Width   := ScaleX(100);
  DatabaseHostLabel.Height  := ScaleY(20);
  { Database Host Edit }
  DatabaseHostEdit          := TEdit.Create(DatabasePage);
  DatabaseHostEdit.Parent   := DatabasePage.Surface;
  DatabaseHostEdit.Left     := ScaleX(110);
  DatabaseHostEdit.Top      := ScaleY(109);
  DatabaseHostEdit.Width    := ScaleX(150);
  DatabaseHostEdit.Height   := ScaleY(20);
  {Database Port Label }
  DatabasePortLabel         := TLabel.Create(DatabasePage);
  DatabasePortLabel.Parent  := DatabasePage.Surface;
  DatabasePortLabel.Caption := 'Port:';
  DatabasePortLabel.Left    := ScaleX(0);
  DatabasePortLabel.Top     := ScaleY(133);
  DatabasePortLabel.Width   := ScaleX(100);
  DatabasePortLabel.Height  := ScaleY(20);
  { Database Port Edit }
  DatabasePortEdit          := TEdit.Create(DatabasePage);
  DatabasePortEdit.Parent   := DatabasePage.Surface;
  DatabasePortEdit.Left     := ScaleX(110);
  DatabasePortEdit.Top      := ScaleY(133);
  DatabasePortEdit.Width    := ScaleX(150);
  DatabasePortEdit.Height   := ScaleY(20);
  { Database Auth Intro Label }
  DatabaseAuthIntroLabel         := TLabel.Create(DatabasePage);
  DatabaseAuthIntroLabel.Parent  := DatabasePage.Surface;
  DatabaseAuthIntroLabel.Caption := 'Database authentication (blank if authentication not required):';
  DatabaseAuthIntroLabel.Left    := ScaleX(0);
  DatabaseAuthIntroLabel.Top     := ScaleY(162);
  DatabaseAuthIntroLabel.Width   := ScaleX(350);
  DatabaseAuthIntroLabel.Height  := ScaleY(20);
  {Database Host Label }
  DatabaseUsernameLabel         := TLabel.Create(DatabasePage);
  DatabaseUsernameLabel.Parent  := DatabasePage.Surface;
  DatabaseUsernameLabel.Caption := 'Username:';
  DatabaseUsernameLabel.Left    := ScaleX(0);
  DatabaseUsernameLabel.Top     := ScaleY(186);
  DatabaseUsernameLabel.Width   := ScaleX(100);
  DatabaseUsernameLabel.Height  := ScaleY(20);
  { Database Host Edit }
  DatabaseUsernameEdit          := TEdit.Create(DatabasePage);
  DatabaseUsernameEdit.Parent   := DatabasePage.Surface;
  DatabaseUsernameEdit.Left     := ScaleX(110);
  DatabaseUsernameEdit.Top      := ScaleY(186);
  DatabaseUsernameEdit.Width    := ScaleX(150);
  DatabaseUsernameEdit.Height   := ScaleY(20);
  {Database Port Label }
  DatabasePasswordLabel         := TLabel.Create(DatabasePage);
  DatabasePasswordLabel.Parent  := DatabasePage.Surface;
  DatabasePasswordLabel.Caption := 'Password:';
  DatabasePasswordLabel.Left    := ScaleX(0);
  DatabasePasswordLabel.Top     := ScaleY(210);
  DatabasePasswordLabel.Width   := ScaleX(100);
  DatabasePasswordLabel.Height  := ScaleY(20);
  { Database Host Edit }
  DatabasePasswordEdit          := TPasswordEdit.Create(DatabasePage);
  DatabasePasswordEdit.Parent   := DatabasePage.Surface;
  DatabasePasswordEdit.Left     := ScaleX(110);
  DatabasePasswordEdit.Top      := ScaleY(210);
  DatabasePasswordEdit.Width    := ScaleX(150);
  DatabasePasswordEdit.Height   := ScaleY(20);
  
  { Connect handlers }
  InstallMongoCBox.onClick    := @InstallMongoCBoxOnClick;
  DatabasePathButton.onClick  := @DatabasePathButtonOnClick;


end;

end.
