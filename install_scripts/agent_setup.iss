; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; ============== IMPORTANT ================
; For this to work, change the SourceDir assignment in the
; [Setup] section to your network-inventory path.

#define MyAppName "Umit Inventory Agent"
#define MyAppVersion "1.0"
#define MyAppPublisher "Umit Project"
#define MyAppURL "http://www.umitproject.org"
#define MyAppExeName "umit_ni_agent.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{8D9B35D7-D5DA-4785-A2AD-0720A4F9A022}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
LicenseFile=LICENSE
OutputBaseFilename=umit_ni_agent_v{#MyAppVersion}_setup
Compression=lzma                             
SetupIconFile=share\icons\umit\inventory\umit_48.ico
SolidCompression=yes
PrivilegesRequired=admin
; ======= Change this to your network inventory dir =======
SourceDir=F:\Work\network-inventory

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
;Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Run]
Filename: {app}\umit_ni_agent.exe; Parameters: install; WorkingDir: {app}; Description: "Install as a Service (Recommended)"; Flags: SkipIfSilent ShellExec WaitUntilIdle RunAsCurrentUser; 

[Registry]
Root: HKLM; SubKey: SOFTWARE\Umit\Inventory; ValueType: string; ValueName: DataDirAgent; ValueData: {app}; 
Root: HKLM; SubKey: SOFTWARE\Umit\Inventory; ValueType: string; ValueName: InstallPathAgent; ValueData: {app};
 
[CustomMessages]
; Notifications Server page
ServerForm_Caption=Notifications Server Settings
ServerForm_Description=Select the connection related information. A Umit Network Inventory Agent must be connected to a Notifications Server.
ServerForm_Host_Label=Server hostname or IP:
ServerForm_Port_Label=Server port:
ServerForm_Username_Label=Username:
ServerForm_Password_Label=Password:

[Code]
Var
PortUserValue: String;
ServerPage: TWizardPage;
{ Server Page widgets }
HostLabel: TLabel;
PortLabel: TLabel;
UsernameLabel: TLabel;
PasswordLabel: TLabel;
HostEdit: TEdit;
PortEdit: TEdit;
UsernameEdit: TEdit;
PasswordEdit: TPasswordEdit;
AuthCBox: TCheckBox;
SSLCBox: TCheckBox;

{ Functions used to get the values from the [Code] section }
function GetHost(Param: String): String;
begin
  Result := HostEdit.Text;
end;

function GetPort(Param: String): String;
begin
  Result := PortEdit.Text;
end;

function GetAuthEnabled(Param: String): String;
begin
  if AuthCBox.Checked = True then
  begin
    Result := 'True'
  end
  else
  begin
    Result := 'False'
  end;
end;

function GetSSLEnabled(Param: String): String;
begin
  if SSLCBox.Checked = True then
  begin
    Result := 'True'
  end
  else
  begin
    Result := 'False'
  end;
end;

function GetUsername(Param: String): String;
begin
  Result := UsernameEdit.Text;
end;

function GetPassword(Param: String): String;
begin
  Result := PasswordEdit.Text;
end;

{ Called at the end of the setup to save the configurations }
procedure SaveConfiguration;
var
  ConfigFileStream: TFileStream;
  InstallPath: String;
  ConfigPath: String;
  Line: String;
begin
  InstallPath := ExpandConstant('{app}');
  ConfigPath := InstallPath + '\share\umit\config\inventory\umit_agent.conf';
  ConfigFileStream := TFileStream.Create(ConfigPath, fmCreate or fmOpenWrite);
  Line := '[GeneralSection]' + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'ssl_enabled = ' + GetSSLEnabled('') + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'authentication_enabled = ' + GetAuthEnabled('') + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'server_address = ' + GetHost('') + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'server_port = ' + GetPort('') + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'username = ' + GetUsername('') + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  Line := 'password = ' + GetPassword('') + #13#10;
  ConfigFileStream.Write(Line, Length(Line));
  ConfigFileStream.Free;
end;

{ Called when the AuthCBox is changed (Authentication Enabled) }
procedure ServerPageAuthCBoxOnClick (Sender: TObject);
begin
  UsernameEdit.Enabled := AuthCBox.Checked;
  PasswordEdit.Enabled := AuthCBox.Checked; 
end;

{ Called when the SSLCBox is changed (Encryption Enabled) }
procedure ServerPageSSLCBoxOnClick (Sender: TObject);
begin
  if SSLCBox.Checked then
  begin
    if PortUserValue = '' then
      PortEdit.Text := '20001'; 
  end
  else
  begin
    if PortUserValue = '' then
      PortEdit.Text := '20000';  
  end;
end;

{ Called when a TEdit on the Server Page is changed }
procedure  ServerPageEditOnChange (Sender: TObject);
var
  NextEnabled : Boolean;
begin
  NextEnabled := True;
  
  if HostEdit.Text = '' then
  begin
    NextEnabled := False;
  end;
  
  if PortEdit.Text = '' then
  begin
    NextEnabled := False;
  end;

  WizardForm.NextButton.Enabled := NextEnabled;
  
  if (PortEdit.Text <>  '20000') and (PortEdit.Text <> '20001') then
  begin
    PortUserValue := PortEdit.Text;
  end
  else
  begin
    PortUserValue := '';
  end;

  if PortEdit.Text = '' then
    ServerPageSSLCBoxOnClick(TObject.Create);
end;

{ Called when the Wizard Page is changed }
procedure CurPageChanged(CurPageID: Integer);
var
NextEnabled : Boolean;
begin
  NextEnabled := True;
  
  if HostEdit.Text = '' then
  begin
    NextEnabled := False;
  end;
  
  if PortEdit.Text = '' then
  begin
    NextEnabled := False;
  end;
  if CurPageID = ServerPage.ID then
    WizardForm.NextButton.Enabled := NextEnabled;
    
  if CurPageId = wpFinished then
    SaveConfiguration();
end;

{ Initialization procedures }
procedure InitializeWizard;
begin

  { === Initialize Server Page === }
  ServerPage := CreateCustomPage( wpSelectDir, 
                                  ExpandConstant('{cm:ServerForm_Caption}'), 
                                  ExpandConstant('{cm:ServerForm_Description}') 
                                  );
  { Host Label }
  HostLabel         := TLabel.Create(ServerPage);
  HostLabel.Parent  := ServerPage.Surface;
  HostLabel.Caption := ExpandConstant('{cm:ServerForm_Host_Label}');
  HostLabel.Left    := ScaleX(15);
  HostLabel.Top     := ScaleY(24);
  HostLabel.Width   := ScaleX(140);
  HostLabel.Height  := ScaleY(13);
  { Port Label }
  PortLabel         := TLabel.Create(ServerPage);
  PortLabel.Parent  := ServerPage.Surface;
  PortLabel.Caption := ExpandConstant('{cm:ServerForm_Port_Label}');
  PortLabel.Left    := ScaleX(15);
  PortLabel.Top     := ScaleY(56);
  PortLabel.Width   := ScaleX(140);
  PortLabel.Height  := ScaleY(13);
  { Host Edit }
  HostEdit          := TEdit.Create(ServerPage);
  HostEdit.Parent   := ServerPage.Surface;
  HostEdit.Left     := ScaleX(155);
  HostEdit.Top      := ScaleY(24);
  HostEdit.Width    := ScaleX(200);
  HostEdit.Height   := ScaleY(21);
  HostEdit.TabOrder := 0;
  { Port Edit }
  PortEdit          := TEdit.Create(ServerPage);
  PortEdit.Parent   := ServerPage.Surface;
  PortEdit.Left     := ScaleX(155);
  PortEdit.Top      := ScaleY(56);
  PortEdit.Width    := ScaleX(200);
  PortEdit.Height   := ScaleY(21);
  PortEdit.TabOrder := 1;
  PortEdit.Text     := '20000';
  { Auth Checkbox }
  SSLCBox           := TCheckBox.Create(ServerPage);
  SSLCBox.Parent    := ServerPage.Surface;
  SSLCBox.Caption   := 'Enable encryption with Notifications Server'
  SSLCBox.Left      := ScaleX(15);
  SSLCBox.Top       := ScaleY(88);
  SSLCBox.Height    := ScaleY(21);
  SSLCBox.Width     := ScaleX(300);
  { Encryption Checkbox }
  AuthCBox          := TCheckBox.Create(ServerPage);
  AuthCBox.Parent   := ServerPage.Surface;
  AuthCBox.Caption  := 'Enable authentication to Notifications Server'
  AuthCBox.Left     := ScaleX(15);
  AuthCBox.Top      := ScaleY(130);
  AuthCBox.Height   := ScaleY(21);
  AuthCBox.Width    := ScaleX(300);
  { Username Label }
  UsernameLabel         := TLabel.Create(ServerPage);
  UsernameLabel.Parent  := ServerPage.Surface;
  UsernameLabel.Caption := ExpandConstant('{cm:ServerForm_Username_Label}');
  UsernameLabel.Left    := ScaleX(40);
  UsernameLabel.Top     := ScaleY(162);
  UsernameLabel.Width   := ScaleX(140);
  UsernameLabel.Height  := ScaleY(13);
  { Password Label }
  PasswordLabel         := TLabel.Create(ServerPage);
  PasswordLabel.Parent  := ServerPage.Surface;
  PasswordLabel.Caption := ExpandConstant('{cm:ServerForm_Password_Label}');
  PasswordLabel.Left    := ScaleX(40);
  PasswordLabel.Top     := ScaleY(194);
  PasswordLabel.Width   := ScaleX(140);
  PasswordLabel.Height  := ScaleY(13);
  { Username Edit }
  UsernameEdit          := TEdit.Create(ServerPage);
  UsernameEdit.Parent   := ServerPage.Surface;
  UsernameEdit.Left     := ScaleX(150);
  UsernameEdit.Top      := ScaleY(162);
  UsernameEdit.Width    := ScaleX(200);
  UsernameEdit.Height   := ScaleY(21);
  UsernameEdit.Enabled  := False;
  { Username Edit }
  PasswordEdit          := TPasswordEdit.Create(ServerPage);
  PasswordEdit.Parent   := ServerPage.Surface;
  PasswordEdit.Left     := ScaleX(150);
  PasswordEdit.Top      := ScaleY(194);
  PasswordEdit.Width    := ScaleX(200);
  PasswordEdit.Height   := ScaleY(21);
  PasswordEdit.Enabled  := False;
 
  { Connect handlers }
  HostEdit.OnChange := @ServerPageEditOnChange;
  PortEdit.onChange := @ServerPageEditOnChange;
  AuthCBox.onClick  := @ServerPageAuthCBoxOnClick;
  SSLCBox.onClick   := @ServerPageSSLCBoxOnClick;

end;

end.
