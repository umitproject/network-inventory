# Copyright (C) 2011 Adriano Monteiro Marques.
#
# Author: Dragos Dena <dragos.dena@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

from umit.inventory.server.Configs import ServerConfig
from umit.inventory.common import CorruptInventoryModule
import umit.inventory.common

from twisted.internet import reactor


class ServerCore:


    def __init__(self, configs):
        self.configs = configs
        self.shell = ServerShell(self)
        self.modules = []
        self._load_modules()


    def _load_modules(self):
        # Loads the modules as defined in the configuration file
        modules_names = self.configs.get_modules_list()

        for module_name in modules_names:
            if not conf.module_get_enable(module_name):
                continue
            try:
                module_path = self.configs.module_get_option(module_name,\
                        ServerConfig.module_path)
                module_obj = umit.inventory.common.load_module(module_name,\
                        module_path, self.configs, self.shell)

                # Do the object the get_name() sanity check
                try:
                    name = module_obj.get_name()
                except:
                    raise CorruptServerModule(module_name, module_path,\
                            CorruptServerModule.get_name)
                if name != module_name:
                    raise CorruptServerModule(module_name, module_path,\
                            CorruptServerModule.get_name)

            except Exception, e:
                traceback.print_exc()
                continue
            self.modules.append(module_obj)


    def run(self):
        """ The server main loop. """
        # Call the modules which implement ListenerServerModule so they
        # will start listening.
        for module in self.modules:
            if isinstance(module, Module.ListenerServerModule):
                module.listen()

        reactor.run()



class CorruptServerModule(CorruptInventoryModule):

    get_name = 2

    def __init__(self, module_name, module_path, err_type=0):
        CorruptInventoryModule.__init__(self, module_name,\
                module_path, err_type)
        if err_type == CorruptServerModule.get_name:
            self.err_description = module_name + 'doesn\'t implement' +\
                    'the get_name() method or it\'s return value is incorrect'



class ServerShell:
    """
    Used to provide an interface to the Notifications Server internals.
    It provides methods so modules can subscribe to notifications, so they
    will receive real-time notifications and also methods to allow the modules
    to query the database.
    """

    def __init__(self, core):
        self._core = core


    def subscribe(self, listener, subscriber):
        """
        The subscriber will be signaled when the listener ListenerModule will
        receive notifications.
        listener: A ListenerServerModule object.
        subscriber: A ServerModule object.
        """
        pass


    def save_message(self, message):
        """
        Used by modules which implement the ListenerServerModule class to
        store messages to the database. Any modules which subscribed to that
        listener will receive notifications.
        """
        # TODO
        print message


    def query_db(self, search_dict):
        """
        Will query the database and will return a list of objects which
        match the search_dict.
        search_dict: A dictionary with fields like (search_key: search_value)
        used to query the database. It will return all the messages in the
        database which will match all the search_values for the given
        search_key. It can also have fields like (search_key: (value1, value2))
        which means that the search_key can be between those 2 values.

        Example:
            search_dict = {'SourceHost':'192.168.2.100',\
                    Timestamp:('1234567.89','2345678.9'}
            For this search_dict, the method will return a list of
            notifications which were generated by the '192.168.2.100' host and
            were generated between 1234567.89 and 2345678.9.
        """
        #TODO: Decide on the returned message format (JSON or some internal
        # representation).
        pass

